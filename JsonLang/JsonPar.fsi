// Signature file for parser generated by fsyacc
module JsonPar
type token = 
  | Eof_t
  | LBrc_t
  | RBrc_t
  | LBra_t
  | RBra_t
  | Comma_t
  | Colon_t
  | Null_t
  | Bool_t of (bool)
  | Int_t of (int)
  | String_t of (string)
  | Socket_t of (string)
type tokenId = 
    | TOKEN_Eof_t
    | TOKEN_LBrc_t
    | TOKEN_RBrc_t
    | TOKEN_LBra_t
    | TOKEN_RBra_t
    | TOKEN_Comma_t
    | TOKEN_Colon_t
    | TOKEN_Null_t
    | TOKEN_Bool_t
    | TOKEN_Int_t
    | TOKEN_String_t
    | TOKEN_Socket_t
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Object
    | NONTERM_Members
    | NONTERM_Pair
    | NONTERM_Key
    | NONTERM_Array
    | NONTERM_Elements
    | NONTERM_Value
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val Main : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (FbAst.expr) 
